{
    "contents" : "Nonlinear Models\n========================================================\nHere we explore the use of nonlinear models using some tools in R\n\n```{r}\nrequire(ISLR)\nattach(Wage)\n```\n\nPolynomials\n------------\n\nFirst we will use polynomials, and focus on a single predictor age:\n\n```{r}\nfit=lm(wage~poly(age,4),data=Wage)\nsummary(fit)\n```\n\nThe `poly()` function generates a basis of *orthogonal polynomials*.\nLets make a plot of the fitted function, along with the standard errors of the fit.\n\n```{r fig.width=7, fig.height=6}\nagelims=range(age)\nage.grid=seq(from=agelims[1],to=agelims[2])\npreds=predict(fit,newdata=list(age=age.grid),se=TRUE)\nse.bands=cbind(preds$fit+2*preds$se,preds$fit-2*preds$se)\nplot(age,wage,col=\"darkgrey\")\nlines(age.grid,preds$fit,lwd=2,col=\"blue\")\nmatlines(age.grid,se.bands,col=\"blue\",lty=2)\n```\n\nThere are other more direct ways of doing this in R. For example\n\n```{r}\nfita=lm(wage~age+I(age^2)+I(age^3)+I(age^4),data=Wage)\nsummary(fita)\n```\n\nHere `I()` is a *wrapper* function; we need it because `age^2` means something to the formula language, \nwhile `I(age^2)` is protected.\nThe coefficients are different to those we got before! However, the fits are the same:\n\n```{r}\nplot(fitted(fit),fitted(fita))\n```\n\nBy using orthogonal polynomials in this simple way, it turns out that we can separately test\nfor each coefficient. So if we look at the summary again, we can see that the linear, quadratic\nand cubic terms are significant, but not the quartic.\n\n```{r}\nsummary(fit)\n```\n\nThis only works with linear regression, and if there is a single predictor. In general we would use `anova()`\nas this next example demonstrates.\n\n```{r}\nfita=lm(wage~education,data=Wage)\nfitb=lm(wage~education+age,data=Wage)\nfitc=lm(wage~education+poly(age,2),data=Wage)\nfitd=lm(wage~education+poly(age,3),data=Wage)\nanova(fita,fitb,fitc,fitd)\n\n```\n\n### Polynomial logistic regression\n\nNow we fit a logistic regression model to a binary response variable, \nconstructed from `wage`. We code the big earners (`>250K`) as 1, else 0.\n\n```{r}\nfit=glm(I(wage>250) ~ poly(age,3), data=Wage, family=binomial)\nsummary(fit)\npreds=predict(fit,list(age=age.grid),se=T)\nse.bands=preds$fit + cbind(fit=0,lower=-2*preds$se,upper=2*preds$se)\nse.bands[1:5,]\n```\n\nWe have done the computations on the logit scale. To transform we need to apply the inverse logit\nmapping \n$$p=\\frac{e^\\eta}{1+e^\\eta}.$$\n(Here we have used the ability of MarkDown to interpret TeX expressions.) \nWe can do this simultaneously for all three columns of `se.bands`:\n\n```{r}\nprob.bands=exp(se.bands)/(1+exp(se.bands))\nmatplot(age.grid,prob.bands,col=\"blue\",lwd=c(2,1,1),lty=c(1,2,2),type=\"l\",ylim=c(0,.1))\npoints(jitter(age),I(wage>250)/10,pch=\"|\",cex=.5)\n```\n\nSplines\n-------\nSplines are more flexible than polynomials, but the idea is rather similar.\nHere we will explore cubic splines.\n\n ```{r}\nrequire(splines)\nfit=lm(wage~bs(age,knots=c(25,40,60)),data=Wage)\nplot(age,wage,col=\"darkgrey\")\nlines(age.grid,predict(fit,list(age=age.grid)),col=\"darkgreen\",lwd=2)\nabline(v=c(25,40,60),lty=2,col=\"darkgreen\")\n```\n\nThe smoothing splines does not require knot selection, but it does have a smoothing parameter,\nwhich can conveniently be specified via the effective degrees of freedom or `df`.\n\n```{r}\nfit=smooth.spline(age,wage,df=16)\nlines(fit,col=\"red\",lwd=2)\n```\n\nOr we can use LOO cross-validation to select the smoothing parameter for us automatically:\n\n```{r}\nfit=smooth.spline(age,wage,cv=TRUE)\nlines(fit,col=\"purple\",lwd=2)\nfit\n```\n\nGeneralized Additive Models\n---------------------------\n\nSo far we have focused on fitting models with mostly single nonlinear terms.\nThe `gam` package makes it easier to work with multiple nonlinear terms. In addition \nit knows how to plot these functions and their standard errors.\n\n```{r fig.width=10, fig.height=5}\nrequire(gam)\ngam1=gam(wage~s(age,df=4)+s(year,df=4)+education,data=Wage)\npar(mfrow=c(1,3))\nplot(gam1,se=T)\ngam2=gam(I(wage>250)~s(age,df=4)+s(year,df=4)+education,data=Wage,family=binomial)\nplot(gam2)\n```\n\nLets see if we need a nonlinear terms for year\n\n```{r}\ngam2a=gam(I(wage>250)~s(age,df=4)+year+education,data=Wage,family=binomial)\nanova(gam2a,gam2,test=\"Chisq\")\n```\n\nOne nice feature of the `gam` package is that it knows how to plot the functions nicely,\neven for models fit by `lm` and `glm`.\n\n```{r fig.width=10, fig.height=5}\npar(mfrow=c(1,3))\nlm1=lm(wage~ns(age,df=4)+ns(year,df=4)+education,data=Wage)\nplot.gam(lm1,se=T)\n```\n\n\n\n\n\n \n",
    "created" : 1435259609651.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1247714904",
    "id" : "700D2224",
    "lastKnownWriteTime" : 1435167384,
    "path" : "~/stanford_stat_learning/ch7_nonlinear_functions.Rmd",
    "project_path" : "ch7_nonlinear_functions.Rmd",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_markdown"
}