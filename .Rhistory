filt=(runmed(filt,3))
plot(filt)
filt=(runmed(filt,3))
plot(filt)
plot(filt)
unstep_noise=step_noise-filt
unstep_noise=step_noise-filt
filt=(runmed(filt,3))
plot(filt)
filter_window=3
filt=(runmed(step_noise,filter_window))
plot(filt)
filt=(runmed(filt,3))
plot(filt)
filt=(runmed(filt,3))
plot(filt)
filt=(runmed(filt,3))
plot(filt)
filt=(runmed(filt,3))
plot(filt)
filt=(runmed(filt,3))
plot(filt)
filt=(runmed(filt,3))
plot(filt)
filter_window=3
filt=round((runmed(step_noise,filter_window)))
plot(filt)
unstep_noise=step_noise-filt
plot(unstep_noise,type="p")
lines(round(unstep_noise),type="p")
bad_ind=which(round(unstep_noise)==-1)
bad_ind
unstep_noise[bad_ind]=unstep_noise[bad_ind]+1
plot(unstep_noise,type="p")
lines(round(unstep_noise),type="p")
hist(unstep_noise)
lines(round(unstep_noise),type="p")
plot(unstep_noise,type="p")
lines(round(unstep_noise),type="p")
filter_window=3
filt=round((runmed(step_noise,filter_window)))
plot(filt)
filt=((runmed(step_noise,filter_window)))
plot(filt)
unstep_noise=step_noise-filt
plot(unstep_noise,type="p")
lines(round(unstep_noise),type="p")
plot(unstep_noise,type="p")
lines(round(unstep_noise),type="p")
filter_window=3
filt=((runmed(step_noise,filter_window)))
plot(filt)
unstep_noise=step_noise-filt
plot(unstep_noise,type="p")
lines(round(unstep_noise),type="p")
plot(step_noise)
filt=((runmed(step_noise,filter_window)))
filt=runmed(step_noise,filter_window)
plot(filt)
?runmed
?runmean
filter_window=3
filt=runmed(filter(step_noisex,rep(1/filter_window,filter_window),filter_window)
plot(filt)
filter(step_noisex,rep(1/filter_window,filter_window)
filt=runmed(filter(step_noisex,rep(1/filter_window,filter_window)),filter_window)
filt=runmed(filter(step_noise,rep(1/filter_window,filter_window)),filter_window)
filter_window=5
filt=runmed(step_noise,filter_window)
plot(filt)
filt=runmed(filt,filter_window-2)
plot(filt)
filt=runmed(filt,filter_window-2)
plot(filt)
filt=runmed(filt,filter_window-2)
plot(filt)
filt=runmed(filt,filter_window-2)
plot(filt)
filt=runmed(filt,filter_window-2)
plot(filt)
filt=runmed(filt,filter_window-2)
plot(filt)
filt=runmed(filt,filter_window-2)
plot(filt)
filt=runmed(filt,filter_window-2)
plot(filt)
unstep_noise=step_noise-filt
plot(unstep_noise,type="p")
plot(noise_vec)
plot(unstep_noise,type="p")
lines(round(unstep_noise),type="p")
bad_ind=which(round(unstep_noise)==-1)
unstep_noise[bad_ind]=unstep_noise[bad_ind]+1
plot(unstep_noise,type="p")
lines(round(unstep_noise),type="p")
plot(unstep_noise,type="p")
plot(noise_vec)
plot(unstep_noise,type="p")
filt=runmed(step_noise,filter_window)
plot(filt)
filt=runmed(round(step_noise),filter_window)
plot(filt)
steps
unstep_noise=step_noise-filt
plot(unstep_noise,type="p")
lines(round(unstep_noise),type="p")
plot(filt)
plot(unstep_noise,type="p")
lines(round(unstep_noise),type="p")
plot(unstep_noise,type="p")
bad_ind=which(round(unstep_noise)==-1)
bad_ind
unstep_noise[bad_ind]=unstep_noise[bad_ind]+1
plot(unstep_noise,type="p")
plot(noise_vec)
plot(unstep_noise,type="p")
plot(unstep_noise,type="p")
plot(noise_vec)
summary(unstep_noise!=unstep_noise)
sum(which(unstep_noise!=unstep_noise))
sum(which(unstep_noise!=unstep_noise))
unstep_noise=step_noise-filt
plot(unstep_noise,type="p")
sum(which(unstep_noise!=unstep_noise))
plot(filt)
plot(unstep_noise,type="p")
sum(which(unstep_noise!=noise_vec))
plot(unstep_noise,type="p")
plot(noise_vec)
plot(unstep_noise,type="p")
plot(noise_vec)
sum(which(unstep_noise!=noise_vec))
plot(unstep_noise,type="p")
plot(noise_vec)
bad_ind=which(round(unstep_noise)==-1)
unstep_noise[bad_ind]=unstep_noise[bad_ind]+1
plot(unstep_noise,type="p")
plot(noise_vec)
sum(which(unstep_noise!=noise_vec))
plot(unstep_noise,type="p")
plot(noise_vec)
sum(abs(unstep_noise-noise_vec))
sum(abs(round(unstep_noise)-round(noise_vec)))
len=1000
noise=rnorm(len,-.1,.1)
good_vec=rep(c(0,1,0,0),len/4)
noise_vec=good_vec+noise
plot(noise_vec)
steps=round(rnorm(10,-1,1))
t=sapply(steps,function(x) x*rep(1,100))
steps_10=NULL
for(i in 1:ncol(t)) steps_10=c(steps_10,t[,i])
step_noise=noise_vec+steps_10
plot(step_noise)
filter_window=5
filt=runmed(round(step_noise),filter_window)
plot(filt)
unstep_noise=step_noise-filt
plot(unstep_noise,type="p")
bad_ind=which(round(unstep_noise)==-1)
unstep_noise[bad_ind]=unstep_noise[bad_ind]+1
plot(unstep_noise,type="p")
plot(noise_vec)
sum(abs(unstep_noise-noise_vec))
sum(abs(round(unstep_noise)-round(noise_vec)))
plot(unstep_noise,type="p")
plot(noise_vec)
unstep_noise=step_noise-filt
plot(unstep_noise,type="p")
bad_ind=which(round(unstep_noise)==-1)
unstep_noise[bad_ind]=unstep_noise[bad_ind]+1
plot(unstep_noise,type="p")
plot(noise_vec)
sum(abs(unstep_noise-noise_vec))
sum(abs(round(unstep_noise)-round(noise_vec)))
len=1000
noise=rnorm(len,-.1,.1)
good_vec=rep(c(0,1,0,0),len/4)
noise_vec=good_vec+noise
plot(noise_vec)
steps=round(rnorm(20,-1,1))
t=sapply(steps,function(x) x*rep(1,50))
steps_10=NULL
for(i in 1:ncol(t)) steps_10=c(steps_10,t[,i])
step_noise=noise_vec+steps_10
plot(step_noise)
steps
filter_window=5
filt=runmed(round(step_noise),filter_window)
plot(filt)
unstep_noise=step_noise-filt
plot(unstep_noise,type="p")
bad_ind=which(round(unstep_noise)==-1)
unstep_noise[bad_ind]=unstep_noise[bad_ind]+1
plot(unstep_noise,type="p")
plot(noise_vec)
plot(unstep_noise,type="p")
plot(noise_vec)
sum(abs(unstep_noise-noise_vec))
sum(abs(unstep_noise-noise_vec))
sum(abs(round(unstep_noise)-round(noise_vec)))
plot(unstep_noise,type="p")
plot(noise_vec)
sum(abs(unstep_noise-noise_vec))
sum(abs(round(unstep_noise)-round(noise_vec)))
require(ISLR)
names(Smarket)
summary(Smarket)
?Smarket
pairs(Smarket,col=Smarket$Direction)
glm.fit=glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,
data=Smarket,family=binomial)
summary(glm.fit)
names(Smarket)
summary(Smarket)
glm.fit=glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,
data=Smarket,family=binomial)
glm.probs=predict(glm.fit,type="response")
glm.probs[1:5]
glm.pred=ifelse(glm.probs>0.5,"Up","Down")
attach(Smarket)
table(glm.pred,Direction)
mean(glm.pred==Direction)
train = Year<2005
glm.fit=glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,
data=Smarket,family=binomial, subset=train)
glm.probs=predict(glm.fit,newdata=Smarket[!train,],type="response")
glm.pred=ifelse(glm.probs >0.5,"Up","Down")
Direction.2005=Smarket$Direction[!train]
table(glm.pred,Direction.2005)
mean(glm.pred==Direction.2005)
glm.fit=glm(Direction~Lag1+Lag2,
data=Smarket,family=binomial, subset=train)
glm.probs=predict(glm.fit,newdata=Smarket[!train,],type="response")
glm.pred=ifelse(glm.probs >0.5,"Up","Down")
table(glm.pred,Direction.2005)
mean(glm.pred==Direction.2005)
106/(76+106)
require(MASS)
len=1000
noise=rnorm(len,-.1,.1)
good_vec=rep(c(0,1,0,0),len/4)
noise_vec=good_vec+noise
plot(noise_vec)
steps=round(rnorm(20,-1,1))
t=sapply(steps,function(x) x*rep(1,50))
steps_10=NULL
for(i in 1:ncol(t)) steps_10=c(steps_10,t[,i])
step_noise=noise_vec+steps_10
plot(step_noise)
filter_window=5
filt=runmed(round(step_noise),filter_window)
plot(filt)
unstep_noise=step_noise-filt
plot(unstep_noise,type="p")
bad_ind=which(round(unstep_noise)==-1)
unstep_noise[bad_ind]=unstep_noise[bad_ind]+1
plot(unstep_noise,type="p")
plot(noise_vec)
sum(abs(unstep_noise-noise_vec))
sum(abs(round(unstep_noise)-round(noise_vec)))
plot(unstep_noise,type="p")
plot(noise_vec)
plot(unstep_noise,type="p")
plot(noise_vec)
sum(abs(unstep_noise-noise_vec))
sum(abs(round(unstep_noise)-round(noise_vec)))
bad_ind
bad_ind
len=1000
noise=rnorm(len,-.1,.1)
good_vec=rep(c(0,1,0,0),len/4)
noise_vec=good_vec+noise
plot(noise_vec)
steps=round(rnorm(20,-1,1))
t=sapply(steps,function(x) x*rep(1,50))
steps_10=NULL
for(i in 1:ncol(t)) steps_10=c(steps_10,t[,i])
step_noise=noise_vec+steps_10
plot(step_noise)
steps
t=sapply(steps,function(x) x*rep(1,50))
steps_10=NULL
for(i in 1:ncol(t)) steps_10=c(steps_10,t[,i])
step_noise=noise_vec+steps_10
plot(step_noise)
filter_window=5
filt=runmed(round(step_noise),filter_window)
plot(filt)
unstep_noise=step_noise-filt
plot(unstep_noise,type="p")
plot(step_noise)
table(cut(step_noise,20)
)
df=data.frame(x=1:len,y=step_noise)
table(cut(df$x,20))
fit=lm(df$y~cut(df$x,20))
fit
steps
fit=lm(df$y~0+cut(df$x,20))
fit
steps
coeff(summary(fit))
coef(summary(fit))
coef(summary(fit))[1]
coef(summary(fit))[,1]
round(coef(summary(fit))[,1])
steps
as.vector(round(coef(summary(fit))[,1]))
bad_ind=which(round(unstep_noise)==-1)
unstep_noise[bad_ind]=unstep_noise[bad_ind]+1
plot(unstep_noise,type="p")
plot(noise_vec)
sum(abs(unstep_noise-noise_vec))
sum(abs(round(unstep_noise)-round(noise_vec)))
as.vector((coef(summary(fit))[,1]))
step_fit=as.vector((coef(summary(fit))[,1]))
step_fit=as.vector((coef(summary(fit))[,1]))
step_fit
steps
step_fit=as.vector((coef(summary(fit))[,1]))
step_fit
t=sapply(step_fit,function(x) x*rep(1,50))
length(t)
steps_10=NULL
for(i in 1:ncol(t)) steps_10=c(steps_10,t[,i])
unstep_noise=step_noise-steps_10
plot(step_noise)
plot(noise_vec)
plot(unstep_noise)
plot(noise_vec)
plot(unstep_noise)
plot(noise_vec)
len=1000
noise=rnorm(len,-.1,.1)
good_vec=rep(c(0,1,0,0),len/4)
noise_vec=good_vec+noise
plot(noise_vec)
steps=round(rnorm(20,-1,1))
t=sapply(steps,function(x) x*rep(1,50))
steps_10=NULL
for(i in 1:ncol(t)) steps_10=c(steps_10,t[,i])
step_noise=noise_vec+steps_10
plot(step_noise)
filter_window=5
filt=runmed(round(step_noise),filter_window)
plot(filt)
filt=runmed((step_noise),filter_window)
plot(filt)
unstep_noise=step_noise-filt
plot(unstep_noise,type="p")
filter_window=5
filt=runmed((step_noise),filter_window)
plot(filt)
unstep_noise=step_noise-filt
plot(unstep_noise,type="p")
bad_ind=which(round(unstep_noise)==-1)
bad_ind
plot(filt)
title("note the averaging issue between steps")
unstep_noise=step_noise-filt
plot(unstep_noise,type="p")
plot(unstep_noise,type="p")
plot(noise_vec)
df=data.frame(x=1:len,y=step_noise)
fit=lm(df$y~0+cut(df$x,20))
step_fit=as.vector((coef(summary(fit))[,1]))
step_fit
step_fit=as.vector((coef(summary(fit))[,1]))
t=sapply(step_fit,function(x) x*rep(1,50))
steps_10=NULL
steps_10=NULL
for(i in 1:ncol(t)) steps_10=c(steps_10,t[,i])
unstep_noise=step_noise-steps_10
plot(unstep_noise)
require(ISLR)
names(Smarket)
summary(Smarket)
?Smarket
pairs(Smarket,col=Smarket$Direction)
glm.fit=glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,
data=Smarket,family=binomial)
summary(glm.fit)
glm.probs=predict(glm.fit,type="response")
glm.probs[1:5]
glm.pred=ifelse(glm.probs>0.5,"Up","Down")
attach(Smarket)
table(glm.pred,Direction)
mean(glm.pred==Direction)
train = Year<2005
glm.fit=glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,
data=Smarket,family=binomial, subset=train)
glm.probs=predict(glm.fit,newdata=Smarket[!train,],type="response")
glm.pred=ifelse(glm.probs >0.5,"Up","Down")
Direction.2005=Smarket$Direction[!train]
table(glm.pred,Direction.2005)
mean(glm.pred==Direction.2005)
glm.fit=glm(Direction~Lag1+Lag2,
data=Smarket,family=binomial, subset=train)
glm.probs=predict(glm.fit,newdata=Smarket[!train,],type="response")
glm.pred=ifelse(glm.probs >0.5,"Up","Down")
table(glm.pred,Direction.2005)
mean(glm.pred==Direction.2005)
106/(76+106)
require(MASS)
lda.fit=lda(Direction~Lag1+Lag2,data=Smarket, subset=Year<2005)
table(Smarket$Direction)
lda.fit
plot(lda.fit)
Smarket.2005=subset(Smarket,Year==2005)
lda.pred=predict(lda.fit,Smarket.2005)
lda.pred[1:5,]
lda.pred
lda.pred[1:5]
str(lda.pred)
class(lda.pred)
data.frame(lda.pred)[1:5,]
table(lda.pred$class,Smarket.2005$Direction)
mean(lda.pred$class==Smarket.2005$Direction)
library(class)
?knn
attach(Smarket)
Xlag=cbind(Lag1,Lag2)
train=Year<2005
knn.pred=knn(Xlag[train,],Xlag[!train,],Direction[train],k=1)
table(knn.pred,Direction[!train])
mean(knn.pred==Direction[!train])
require(ISLR)
require(boot)
?cv.glm
plot(mpg~horsepower,data=Auto)
glm.fit=glm(mpg~horsepower, data=Auto)
cv.glm(Auto,glm.fit)$delta #pretty slow (doesnt use formula (5.2) on page 180)
loocv=function(fit){
h=lm.influence(fit)$h
mean((residuals(fit)/(1-h))^2)
}
loocv(glm.fit)
cv.error=rep(0,5)
degree=1:5
for(d in degree){
glm.fit=glm(mpg~poly(horsepower,d), data=Auto)
cv.error[d]=loocv(glm.fit)
}
plot(degree,cv.error,type="b")
cv.error10=rep(0,5)
for(d in degree){
glm.fit=glm(mpg~poly(horsepower,d), data=Auto)
cv.error10[d]=cv.glm(Auto,glm.fit,K=10)$delta[1]
}
lines(degree,cv.error10,type="b",col="red")
alpha=function(x,y){
vx=var(x)
vy=var(y)
cxy=cov(x,y)
(vy-cxy)/(vx+vy-2*cxy)
}
alpha(Portfolio$X,Portfolio$Y)
install.packages("leaps")
install.packages("glmnet")
??tree
install.packages("caret")
install.packages("tree")
set.seed(10111)
x=matrix(rnorm(40),20,2)
y=rep(c(-1,1),c(10,10))
x[y==1,]=x[y==1,]+1
plot(x,col=y+3,pch=19)
library(e1071)
dat=data.frame(x,y=as.factor(y))
svmfit=svm(y~.,data=dat,kernel="linear",cost=10,scale=FALSE)
print(svmfit)
plot(svmfit,dat)
make.grid=function(x,n=75){
grange=apply(x,2,range)
x1=seq(from=grange[1,1],to=grange[2,1],length=n)
x2=seq(from=grange[1,2],to=grange[2,2],length=n)
expand.grid(X1=x1,X2=x2)
}
xgrid=make.grid(x)
ygrid=predict(svmfit,xgrid)
plot(xgrid,col=c("red","blue")[as.numeric(ygrid)],pch=20,cex=.2)
points(x,col=y+3,pch=19)
points(x[svmfit$index,],pch=5,cex=2)
beta=drop(t(svmfit$coefs)%*%x[svmfit$index,])
beta0=svmfit$rho
plot(xgrid,col=c("red","blue")[as.numeric(ygrid)],pch=20,cex=.2)
points(x,col=y+3,pch=19)
points(x[svmfit$index,],pch=5,cex=2)
abline(beta0/beta[2],-beta[1]/beta[2])
abline((beta0-1)/beta[2],-beta[1]/beta[2],lty=2)
abline((beta0+1)/beta[2],-beta[1]/beta[2],lty=2)
load(url("http://www-stat.stanford.edu/~tibs/ElemStatLearn/datasets/ESL.mixture.rda"))
names(ESL.mixture)
rm(x,y)
attach(ESL.mixture)
plot(x,col=y+1)
dat=data.frame(y=factor(y),x)
fit=svm(factor(y)~.,data=dat,scale=FALSE,kernel="radial",cost=5)
xgrid=expand.grid(X1=px1,X2=px2)
ygrid=predict(fit,xgrid)
plot(xgrid,col=as.numeric(ygrid),pch=20,cex=.2)
points(x,col=y+1,pch=19)
func=predict(fit,xgrid,decision.values=TRUE)
func=attributes(func)$decision
xgrid=expand.grid(X1=px1,X2=px2)
ygrid=predict(fit,xgrid)
plot(xgrid,col=as.numeric(ygrid),pch=20,cex=.2)
plot(xgrid,col=as.numeric(ygrid),pch=20,cex=.2)
points(x,col=y+1,pch=19)
contour(px1,px2,matrix(func,69,99),level=0,add=TRUE)
contour(px1,px2,matrix(prob,69,99),level=.5,add=TRUE,col="blue",lwd=2)
